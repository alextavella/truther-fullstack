/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Truther API
 * Truther API Documentation
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateUser201,
  CreateUserBody,
  GetCoinMarket200,
  GetCoinMarketParams,
  GetUser200,
  GetUserBody,
  ListUsers200,
  ListUsersParams,
  SearchCoins200,
  SearchCoinsParams,
  UpdateUser200,
  UpdateUserBody,
} from './model'
import { customInstance } from '../lib/api'
import type { BodyType } from '../lib/api'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * Get user
 * @summary Get user
 */
export const getUser = (
  getUserBody: BodyType<GetUserBody>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetUser200>(
    {
      url: `/auth`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: getUserBody,
    },
    options,
  )
}

/**
 * Search coins
 * @summary Search coins
 */
export const searchCoins = (
  params: SearchCoinsParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<SearchCoins200>(
    { url: `/coins/search`, method: 'GET', params },
    options,
  )
}

/**
 * Get coin market
 * @summary Get coin market
 */
export const getCoinMarket = (
  id: string,
  params?: GetCoinMarketParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetCoinMarket200>(
    { url: `/coins/${id}/market`, method: 'GET', params },
    options,
  )
}

/**
 * Create user
 * @summary Create user
 */
export const createUser = (
  createUserBody: BodyType<CreateUserBody>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CreateUser201>(
    {
      url: `/users`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createUserBody,
    },
    options,
  )
}

/**
 * Update user
 * @summary Update user
 */
export const updateUser = (
  updateUserBody: BodyType<UpdateUserBody>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UpdateUser200>(
    {
      url: `/users`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateUserBody,
    },
    options,
  )
}

/**
 * List users
 * @summary List users
 */
export const listUsers = (
  params?: ListUsersParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ListUsers200>(
    { url: `/users`, method: 'GET', params },
    options,
  )
}

type AwaitedInput<T> = PromiseLike<T> | T

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never

export type GetUserResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type SearchCoinsResult = NonNullable<
  Awaited<ReturnType<typeof searchCoins>>
>
export type GetCoinMarketResult = NonNullable<
  Awaited<ReturnType<typeof getCoinMarket>>
>
export type CreateUserResult = NonNullable<
  Awaited<ReturnType<typeof createUser>>
>
export type UpdateUserResult = NonNullable<
  Awaited<ReturnType<typeof updateUser>>
>
export type ListUsersResult = NonNullable<Awaited<ReturnType<typeof listUsers>>>
